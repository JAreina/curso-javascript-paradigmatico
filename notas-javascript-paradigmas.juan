
*********************************
***********************************
PARADIGMAS DE PROGRAMACIÓN
*********************************
***********************************

Paradigma:  es un ejemplo, patron o modelo que se puede
seguir para programar.

No es lo mismo que patrón de diseño, como modelo-vista-controlador


  PROGRAMAR:
  ____________

    1- Entrada de datos
    2- procesamiento
    3-  Salida de datos
  
  ALGORITMO:
  ____________

   - Entender lo que se va a hacer
   - Pasos ordenados
       Pasos ordenados finitos
       para resolver un problema

  DIAGRAMA DE FLUJO: 
  _____________________
  
      Gráfico de un ALGORITMO




***********************************************
*
*              Javascript  ES : 
*
*
**********************************************
     - PROG ORIENTADA A OBJETOS, 
     - PROG. FUNCIONAL, 
     - PROG. REACTIVA


cómo se escribe:

  - PROG IMPERATIVA: CÓMO TIENES QUE HACER PARA SOLUCIONAR EL PROBLEMA
      
       Describe un problema en términos de instrucciones y condiciones para llegar a un resultado
       Modifica el estado de un programa al permitir la mutación de valores
      
      Usa procedimientos y rutinas como mecanismo de control, que puede generar efectos secundarios

      Existen estructuras cíclicas de programación para iterar como while, for y loop

      Asignación destructiva de variables, una variable puede ser re-asignada tantas veces como se requiera

      No hay garantía que las variables pasen con transparencia de un método a otro

     Código verboso y con muchas líneas de código
   
  - DECLARATIVA : QUÉ QUIERO, NO ME IMPORTA COMO  RESUELVAS EL PROBLEMA
       
       Describe un problema en términos de proposiciones y afirmaciones sin especificar los pasos para resolverlo
       Evita cambiar el estado de un programa al prevenir la mutación de valores

       Usa funciones puramente matemáticas que carecen de efectos secundarios

      No existen estructuras cíclicas, la forma de iterar es a través de la recursión o de funciones de alto nivel como map, reduce y filter   
      

      No hay asignación destructiva de variables, por lo general una variable no puede ser asignada más de una vez

     Las variables son pasadas transparentemente de una función a otra

     Código más expresivo y relativamente más corto


cómo se ejecuta:

 - PROG SINCRONA 
 - PROG ASINCRONA


_____________________________________________________________






